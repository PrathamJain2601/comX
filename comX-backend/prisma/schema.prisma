// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  username     String    @unique
  name         String
  password     String
  avatar       String?
  designation  String
  otp          String?
  isOtpValid   DateTime?
  isVerified   Boolean?  @default(false)
  registeredAt DateTime  @default(now())

  // Relationships
  projects ProjectMembers[]
  memberships   CommunityMember[]
  calendarTasks CommunityCalendar[]
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  coverImage  String?
  scope       Scope    @default(PUBLIC)
  joinCode    String?  @unique
  createdAt   DateTime @default(now())

  // Relationships
  projects      Project[]
  projectMembers      ProjectMembers[]
  members       CommunityMember[]
  calendarTasks CommunityCalendar[]
}

model Project {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int

  projectMembers ProjectMembers[]
}

model ProjectMembers{
  id Int @id @default(autoincrement())
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      Int
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model CommunityMember {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  role        Role      @default(MEMBER)

  joinedAt DateTime @default(now())

  @@unique([userId, communityId])
}

model CommunityCalendar {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  title       String
  color       String
  description String
  startTime   DateTime
  endTime     DateTime
}

enum Role {
  OWNER // The user who created the community
  ADMIN // Admins with elevated permissions
  MEMBER // Regular members
  QUEUE
  BANNED
}

enum Scope {
  PRIVATE
  PUBLIC
}
